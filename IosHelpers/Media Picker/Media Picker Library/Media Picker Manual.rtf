{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red244\green246\blue249;\red6\green33\blue79;
\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;\red0\green116\blue0;
\red28\green0\blue207;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c96471\c97255\c98039;\cssrgb\c1176\c18431\c38431;
\cssrgb\c100000\c100000\c100000;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c0\c45600\c0;
\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
This is a custom library to pick the media (image, video) from gallery/camera by the user\
\
Steps:\
\
1. Add pod  in your project\
\
	
\f1\fs27\fsmilli13600 \cf2 \cb3 \expnd0\expndtw0\kerning0
pod \cf4 'TOCropViewController'
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\
2.  Add the media Picker Library folder and its content files in your project \
MediaPickerViewcontroller and MediaPicker.storyboard are a demo view controller to see the code implementation\
\
3.  Add necessary code when you want to get media \
\
\

\i\fs42 \cb5 \expnd0\expndtw0\kerning0
\
\pard\tx741\pardeftab741\pardirnatural\partightenfactor0

\f1\i0\fs30 \cf6 \cb7 \kerning1\expnd0\expndtw0 		let\cf8  imagePicker = MediaPickerHelperViewController.MediaPicker() \cf9 // returns uinavigation 										controller and media picker view controller
\f0\fs24 \cf0 \

\f1\fs30 \cf8         
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .delegate = \cf6 self // implement the delegate methods \
\

\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .pickerMode = .all  // picker modes are: all, camera or gallery
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .pickerType = .photo // picker type are photo or video
\f0\fs24 \cf0 \

\f1\fs30 \cf8         
\f0\fs24 \cf0 \

\f1\fs30 \cf8         \cf9 // use if pickerType is photo
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .croppingEnabled = \cf6 true\cf8       \cf9 // Croping when enabled, uses custom library downloaded to crop the image
\f0\fs24 \cf0 \

\f1\fs30 \cf8         
\f0\fs24 \cf0 \

\f1\fs30 \cf8         \cf9 // use if cropping enabled
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .croppingStyle = .default
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .aspectRatioPreset = .presetSquare
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .aspectRatioLockEnabled = \cf6 true
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .resetAspectRatioEnabled = \cf6 false
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 1\cf8 .rotateButtonsHidden = \cf6 true
\f0\fs24 \cf0 \

\f1\fs30 \cf8         
\f0\fs24 \cf0 \

\f1\fs30 \cf8         imagePicker.\cf10 0\cf8 .presentAsModal()
\f0\fs24 \cf0 \

\f1\fs30 \cf8         
\f0\fs24 \cf0 \

\f1\fs30 \cf8         present(imagePicker.\cf10 0\cf8 , animated: \cf6 false\cf8 , completion: \cf6 nil\cf8 )
\f0\i\fs42 \cf0 \cb5 \expnd0\expndtw0\kerning0
\
}